{"version":3,"sources":["getRollMetadata.mjs"],"names":["getRollType","expressions","macros","unknowns","hasDiceRoll","expression","some","isRoll","length","Object","values","getRollMetadata","formula","macrosFromCollection","tokens","variables","unknownVariables","usedMacros","noPromptVariables","filter","variable","clause","token","internalMacros","entries","macroName","hasOwnProperty","reduce","objectMakerReduceHelper","externalMacros","targetedCollections","variableTargetsCollection","map","baseVariable","collection","accum","sideEffects","isSideEffectVariable","stripSuffix","stripPrefix","type","getValue","value","result","err","console","warn","message","stack"],"mappings":";;;;;;;AAAA;;AAMA;;AACA;;AACA;;AACA;;;;AAGA;;;;;AAKA;;;;;;AAMA,MAAMA,WAAW,GAAG,CAACC,WAAD,EAAcC,MAAd,EAAsBC,QAAtB,KAAmC;AACrD,QAAMC,WAAW,GAAGC,UAAU,IAAIA,UAAU,CAACC,IAAX,CAAgBC,wBAAhB,CAAlC;;AACA,MAAIJ,QAAQ,CAACK,MAAT,KAAoB,CAAxB,EAA2B;AACzB,QAAIP,WAAW,CAACK,IAAZ,CAAiBF,WAAjB,KAAiCK,MAAM,CAACC,MAAP,CAAcR,MAAd,EAAsBI,IAAtB,CAA2BF,WAA3B,CAArC,EAA8E;AAC5E,aAAO,MAAP;AACD,KAFD,MAEO;AACL,aAAO,OAAP;AACD;AACF,GAND,MAMO;AACL,QAAIH,WAAW,CAACK,IAAZ,CAAiBF,WAAjB,KAAiCK,MAAM,CAACC,MAAP,CAAcR,MAAd,EAAsBI,IAAtB,CAA2BF,WAA3B,CAArC,EAA8E;AAC5E,aAAO,oBAAP;AACD,KAFD,MAEO;AACL,aAAO,qBAAP;AACD;AACF;AACF,CAfD;AAiBA;;;;;;;;;;;;;AAaA;;;;;;;;;;;;;;;;AAcA,MAAMO,eAAe,GAAG,CAACC,OAAD,EAAUC,oBAAV,KAAmC;AACzD,MAAI;AACF,UAAMC,MAAM,GAAG,+BAASF,OAAT,CAAf;AACA,UAAM;AAACX,MAAAA,WAAD;AAAcC,MAAAA;AAAd,QAAwB,0BAAYY,MAAZ,CAA9B;AACA,UAAM;AAACC,MAAAA,SAAS,EAAEC,gBAAZ;AAA8BC,MAAAA;AAA9B,QAA4C,kDAChDhB,WADgD,EACnCC,MADmC,EAC3BW,oBAD2B,CAAlD;AAIA,UAAMK,iBAAiB,GAAGF,gBAAgB,CAACG,MAAjB,CAAwBC,QAAQ,IACxD,CAAC,GAAGX,MAAM,CAACC,MAAP,CAAcO,UAAd,CAAJ,EAA+B,GAAGhB,WAAlC,EAA+CK,IAA/C,CAAoDe,MAAM,IAAIA,MAAM,CAACf,IAAP,CAC5DgB,KAAK,IAAIA,KAAK,KAAM,IAAGF,QAAS,EAD4B,CAA9D,CADwB,CAA1B;AAIA,UAAMG,cAAc,GAAGd,MAAM,CAACe,OAAP,CAAeP,UAAf,EAA2BE,MAA3B,CACrB,CAAC,CAACM,SAAD,CAAD,KAAiBvB,MAAM,CAACwB,cAAP,CAAsBD,SAAtB,CADI,EAEpBE,MAFoB,CAEbC,gCAFa,EAEY,EAFZ,CAAvB;AAGA,UAAMC,cAAc,GAAGpB,MAAM,CAACe,OAAP,CAAeP,UAAf,EAA2BE,MAA3B,CACrB,CAAC,CAACM,SAAD,CAAD,KAAiB,CAACvB,MAAM,CAACwB,cAAP,CAAsBD,SAAtB,CADG,EAEpBE,MAFoB,CAEbC,gCAFa,EAEY,EAFZ,CAAvB;AAIA,UAAME,mBAAmB,GAAGd,gBAAgB,CACzCG,MADyB,CAClBY,2CADkB,EAEzBC,GAFyB,CAErBZ,QAAQ,KAAK;AAChBa,MAAAA,YAAY,EAAE,mCAAY,mCAAYb,QAAZ,CAAZ,CADE;AAEhBc,MAAAA,UAAU,EAAE,2CAAoBd,QAApB;AAFI,KAAL,CAFa,EAMzBO,MANyB,CAMlB,CAACQ,KAAD,EAAQ;AAAEF,MAAAA,YAAF;AAAgBC,MAAAA;AAAhB,KAAR,MAA0C,EAChD,GAAGC,KAD6C;AAEhD,OAACD,UAAD,GAAc,CACZ,IAAIC,KAAK,CAACD,UAAD,CAAL,IAAqB,EAAzB,CADY,EAEZD,YAFY;AAFkC,KAA1C,CANkB,EAYtB,EAZsB,CAA5B;AAcA,UAAMG,WAAW,GAAGtB,MAAM,CAACK,MAAP,CAAckB,sCAAd,EAAoCL,GAApC,CAAwCM,6BAAxC,EAAqDN,GAArD,CAAyDO,6BAAzD,CAApB;AAEA,UAAMC,IAAI,GAAGxC,WAAW,CAACC,WAAD,EAAcgB,UAAd,EAA0BD,gBAA1B,CAAxB;;AACA,UAAMyB,QAAQ,GAAG,MAAM;AACrB,UAAI;AACF,eAAO;AAAEC,UAAAA,KAAK,EAAE,8BAAgB;AAACzC,YAAAA,WAAD;AAAcC,YAAAA,MAAM,EAAEe;AAAtB,WAAhB,EAAmD0B;AAA5D,SAAP;AACD,OAFD,CAEE,OAAOC,GAAP,EAAY;AACZ,eAAO;AAAEF,UAAAA,KAAK,EAAE,CAAC,OAAD;AAAT,SAAP;AACD;AACF,KAND;;AAOA,UAAMC,MAAM,GAAG;AACbpB,MAAAA,cADa;AAEbM,MAAAA,cAFa;AAGbb,MAAAA,gBAHa;AAIbE,MAAAA,iBAJa;AAKbY,MAAAA,mBALa;AAMbM,MAAAA,WANa;AAObI,MAAAA,IAPa;AAQb,UAAIA,IAAI,KAAK,OAAT,GAAmBC,QAAQ,EAA3B,GAAgC,EAApC;AARa,KAAf;AAUA,WAAOE,MAAP;AACD,GArDD,CAqDE,OAAOC,GAAP,EAAY;AACZC,IAAAA,OAAO,CAACC,IAAR,CAAc,uCAAsClC,OAAQ,KAAIgC,GAAG,CAACG,OAAQ,EAA5E;AACAF,IAAAA,OAAO,CAACC,IAAR,CAAaF,GAAG,CAACI,KAAjB;AACA,WAAO;AACLlB,MAAAA,mBAAmB,EAAE,EADhB;AAELd,MAAAA,gBAAgB,EAAE,EAFb;AAGLwB,MAAAA,IAAI,EAAE,OAHD;AAILE,MAAAA,KAAK,EAAE,CAAE,UAASE,GAAG,CAACG,OAAQ,EAAvB;AAJF,KAAP;AAMD;AACF,CAhED;;eAkEepC,e","sourcesContent":["import tokenize, {\n  getTargetCollection,\n  isRoll, stripPrefix, stripSuffix,\n  variableTargetsCollection,\n  isSideEffectVariable,\n} from '../formulaTokenizer';\nimport parseTokens from './parseTokens';\nimport getUnassignedVariablesAndUsedMacros from './getUnassignedVariablesAndUsedMacros';\nimport { objectMakerReduceHelper } from '../helpers';\nimport evaluateFormula from '../evaluateFormula';\n\n\n/**\n * @typedef RollType\n * @type {('roll'|'value'|'roll-with-unknowns'|'value-with-unknowns')}\n */\n\n/**\n * @param {string[]} expressions\n * @param {MacroMap} macros\n * @param {string[]} unknowns\n * @returns {RollType}\n */\nconst getRollType = (expressions, macros, unknowns) => {\n  const hasDiceRoll = expression => expression.some(isRoll);\n  if (unknowns.length === 0) {\n    if (expressions.some(hasDiceRoll) || Object.values(macros).some(hasDiceRoll)) {\n      return 'roll';\n    } else {\n      return 'value';\n    }\n  } else {\n    if (expressions.some(hasDiceRoll) || Object.values(macros).some(hasDiceRoll)) {\n      return 'roll-with-unknowns';\n    } else {\n      return 'value-with-unknowns';\n    }\n  }\n};\n\n/**\n * @typedef RollMetadata\n * @type {object}\n * @property {MacroMap} internalMacros - list of macros we are using that are part of the formula\n * @property {MacroMap} externalMacros - list of macros we are using sourced from Collections\n * @property {string[]} unknownVariables - list of referenced variables that are not set\n * @property {string[]} noPromptVariables - list of unknown variables we are not supposed to prompt for\n * @property {object.<string, object.<string, string[]>>} targetedCollections - targeted variables grouped by collection\n * @property {Array.<string>} sideEffects - list of variables that could have side effects applied\n * @property {string} type - Type of the Roll - 'value', 'roll', or value/roll with unknowns\n *\n */\n\n/**\n * Generate a list of details for a roll:\n * * external macros\n * * unknown variables\n * * internal macros\n * * unknown variables that we should not prompt for\n * * variables that are intended to come from different collections\n * * variables that have side effects\n *\n *\n * @param {string} formula\n * @param {Collection} macrosFromCollection\n * @returns {RollMetadata}\n */\nconst getRollMetadata = (formula, macrosFromCollection) => {\n  try {\n    const tokens = tokenize(formula);\n    const {expressions, macros} = parseTokens(tokens);\n    const {variables: unknownVariables, usedMacros} = getUnassignedVariablesAndUsedMacros(\n      expressions, macros, macrosFromCollection\n    );\n\n    const noPromptVariables = unknownVariables.filter(variable =>\n      [...Object.values(usedMacros), ...expressions].some(clause => clause.some(\n        token => token === `^${variable}`\n      )));\n    const internalMacros = Object.entries(usedMacros).filter(\n      ([macroName]) => macros.hasOwnProperty(macroName))\n      .reduce(objectMakerReduceHelper, {});\n    const externalMacros = Object.entries(usedMacros).filter(\n      ([macroName]) => !macros.hasOwnProperty(macroName))\n      .reduce(objectMakerReduceHelper, {});\n\n    const targetedCollections = unknownVariables\n      .filter(variableTargetsCollection)\n      .map(variable => ({\n        baseVariable: stripPrefix(stripSuffix(variable)),\n        collection: getTargetCollection(variable)\n      }))\n      .reduce((accum, { baseVariable, collection }) => ({\n        ...accum,\n        [collection]: [\n          ...(accum[collection] || []),\n          baseVariable,\n        ],\n      }), {});\n\n    const sideEffects = tokens.filter(isSideEffectVariable).map(stripSuffix).map(stripPrefix);\n\n    const type = getRollType(expressions, usedMacros, unknownVariables);\n    const getValue = () => {\n      try {\n        return { value: evaluateFormula({expressions, macros: usedMacros}).result };\n      } catch (err) {\n        return { value: ['Error'] };\n      }\n    };\n    const result = {\n      internalMacros,\n      externalMacros,\n      unknownVariables,\n      noPromptVariables,\n      targetedCollections,\n      sideEffects,\n      type,\n      ...(type === 'value' ? getValue() : {}),\n    };\n    return result;\n  } catch (err) {\n    console.warn(`Caught error in getRollMetadata for ${formula}: ${err.message}`);\n    console.warn(err.stack);\n    return {\n      targetedCollections: {},\n      unknownVariables: [],\n      type: 'error',\n      value: [`Error: ${err.message}`]\n    };\n  }\n};\n\nexport default getRollMetadata;\n"],"file":"getRollMetadata.js"}