{"version":3,"sources":["formulaParser/getMacrosFromCollection.mjs"],"names":["convertFormulaToRoll","tokens","macroName","formulaClauses","some","clauseHasMislocatedAssignmentOperator","expressions","filter","clause","length","macros","main","helpers","getMacrosFromCollection","collectionFormulasMap","rewrittenFormulas","Object","entries","map","formula","_","macrosAsAnObject","reduce","accum","slice","objectMakerReduceHelper"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;;;AAGA;;;;;;;;;AASA,MAAMA,oBAAoB,GAAG,CAACC,MAAD,EAASC,SAAT,KAAuB;AAClD,QAAMC,cAAc,GAAG,sCAAeF,MAAf,CAAvB;;AACA,MAAIE,cAAc,CAACC,IAAf,CAAoBC,sDAApB,CAAJ,EAAgE;AAC9D,WAAO,IAAP;AACD;;AACD,QAAMC,WAAW,GAAGH,cAAc,CAACI,MAAf,CAAsBC,MAAM,IAAIA,MAAM,CAACC,MAAP,GAAgB,CAAhB,IAAqBD,MAAM,CAAC,CAAD,CAAN,KAAc,GAAnE,CAApB;;AACA,MAAIF,WAAW,CAACG,MAAZ,KAAuB,CAA3B,EAA8B;AAC5B,WAAO,IAAP;AACD;;AACD,QAAMC,MAAM,GAAGP,cAAc,CAACI,MAAf,CAAsBC,MAAM,IAAIA,MAAM,CAACC,MAAP,GAAgB,CAAhB,IAAqBD,MAAM,CAAC,CAAD,CAAN,KAAc,GAAnE,CAAf;AACA,SAAO;AACLG,IAAAA,IAAI,EAAE,CAACT,SAAD,EAAY,GAAZ,EAAiB,GAAGI,WAAW,CAAC,CAAD,CAA/B,CADD;AAELM,IAAAA,OAAO,EAAEF;AAFJ,GAAP;AAID,CAdD;AAgBA;;;;;;;;;;;;;;;AAaA,MAAMG,uBAAuB,GAAIC,qBAAD,IAA2B;AACzD,QAAMC,iBAAiB,GAAGC,MAAM,CAACC,OAAP,CAAeH,qBAAf,EACvBI,GADuB,CACnB,CAAC,CAAChB,SAAD,EAAYiB,OAAZ,CAAD,KAA0BnB,oBAAoB,CAAC,+BAASmB,OAAT,CAAD,EAAoBjB,SAApB,CAD3B,EAEvBK,MAFuB,CAEhBa,CAAC,IAAIA,CAFW,CAA1B;AAGA,QAAMC,gBAAgB,GAAGN,iBAAiB,CAACO,MAAlB,CACvB,CAACC,KAAD,EAAQ;AAAEZ,IAAAA,IAAF;AAAQC,IAAAA;AAAR,GAAR,MAA+B,EAC7B,GAAGW,KAD0B;AAE7B,KAACZ,IAAI,CAAC,CAAD,CAAL,GAAW;AACTQ,MAAAA,OAAO,EAAE,2BAAaR,IAAI,CAACa,KAAL,CAAW,CAAX,CAAb,CADA;AAETZ,MAAAA,OAAO,EAAEA,OAAO,CACbM,GADM,CACFjB,MAAM,IAAI,CAACA,MAAM,CAAC,CAAD,CAAP,EAAY,2BAAaA,MAAM,CAACuB,KAAP,CAAa,CAAb,CAAb,CAAZ,CADR,EAENF,MAFM,CAECG,gCAFD,EAE0B,EAF1B;AAFA;AAFkB,GAA/B,CADuB,EASnB,EATmB,CAAzB;AAUA,SAAOJ,gBAAP;AACD,CAfD;;eAiBeR,uB","sourcesContent":["import tokenize, { splitTokenList } from '../formulaTokenizer';\nimport { clauseHasMislocatedAssignmentOperator } from '../validateFormula';\nimport convertToRPN from '../rpnConverter';\nimport { objectMakerReduceHelper } from '../helpers';\n\n\n/**\n * Transform a formula from the collection into a \"main\" token list and helper token lists\n * @function convertFormulaToRoll\n *\n * @param {RPNTokenList} tokens\n * @param {string} macroName\n *\n * @returns {CollectionRoll|null}\n */\nconst convertFormulaToRoll = (tokens, macroName) => {\n  const formulaClauses = splitTokenList(tokens);\n  if (formulaClauses.some(clauseHasMislocatedAssignmentOperator)) {\n    return null;\n  }\n  const expressions = formulaClauses.filter(clause => clause.length < 2 || clause[1] !== '=');\n  if (expressions.length !== 1) {\n    return null;\n  }\n  const macros = formulaClauses.filter(clause => clause.length > 2 && clause[1] === '=');\n  return {\n    main: [macroName, '=', ...expressions[0]],\n    helpers: macros,\n  };\n};\n\n/**\n * Convert formulas from the collection(s) into a usable object, already converted to RPN.\n * NOTE: In order to be usable in this way, the collection formula must have exactly 1 \"main\" expression.\n *       Formulas with 0 or 2+ main expressions are filtered out.\n * @function getMacrosFromCollection\n *\n * @example // returns { roll: { formula: ['1d20', 'bonus', '+'], helpers: { bonus: ['10'] } } }\n * getMacrosFromCollection({ 'roll': '1d20+bonus,bonus=10'})\n *\n * @param {object.<string, string>} collectionFormulasMap - String formulas, basically as entered by the user\n *\n * @returns {Collection}\n */\nconst getMacrosFromCollection = (collectionFormulasMap) => {\n  const rewrittenFormulas = Object.entries(collectionFormulasMap)\n    .map(([macroName, formula]) => convertFormulaToRoll(tokenize(formula), macroName))\n    .filter(_ => _);\n  const macrosAsAnObject = rewrittenFormulas.reduce(\n    (accum, { main, helpers }) => ({\n      ...accum,\n      [main[0]]: {\n        formula: convertToRPN(main.slice(2)),\n        helpers: helpers\n          .map(tokens => [tokens[0], convertToRPN(tokens.slice(2))])\n          .reduce(objectMakerReduceHelper, {}),\n      }\n    }), {});\n  return macrosAsAnObject;\n};\n\nexport default getMacrosFromCollection;\n"],"file":"getMacrosFromCollection.js"}