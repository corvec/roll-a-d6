{"version":3,"sources":["formulaParser/index.mjs"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6CA;;AACA;;AACA;;AACA","sourcesContent":["/**\n * Grammar:\n * * formula\n * * formula: clause | clause,clause...\n * * clause: group | boolean | assignment\n * * assignment: var = group\n * * op: + | - | * | /\n * * group: value | group op group | (group) | conditional | var | indexed var (x[0]) | param (v[0]) | boolean\n * * comparator: < | > | <= | >= | == | <>\n * * boolean: group comparator group\n * * conditional: boolean -> group ; group | boolean -> group\n *\n * * value = number | roll (3d6)\n *\n * NOTE: The grammar isn't actually strictly enforced.\n * Instead we just strip assignments, convert it to RPN, and then distinguish between values and operators\n */\n\n\n/**\n * A list of tokens in Reverse Polish Notation, e.g., ['1d6','5','+']\n * @typedef RPNTokenList\n * @type {string[]}\n */\n\n/**\n * A map from var names to their tokenized expressions.\n * @typedef MacroMap\n * @type {object.<string, RPNTokenList>}\n */\n\n/**\n * A single Collection formula, converted from the user-entered form into a tokenized, usable object.\n * @typedef CollectionRoll\n * @type {object}\n * @property {RPNTokenList} formula The main expression associated with this macro\n * @property {MacroMap} helpers The helper macros for the main expression\n */\n\n/**\n * Map from names to rolls that have been converted to RPN and are thus available for evaluation\n * @typedef Collection\n * @type {object.<string, CollectionRoll>}\n */\n\nimport parseTokens from './parseTokens';\nimport getRollMetadata from './getRollMetadata';\nimport getMacrosFromCollection from './getMacrosFromCollection';\nimport getUnassignedVariablesAndUsedMacros from './getUnassignedVariablesAndUsedMacros';\n\nexport {\n  parseTokens,\n  getRollMetadata,\n  getMacrosFromCollection,\n  getUnassignedVariablesAndUsedMacros\n};\n"],"file":"index.js"}