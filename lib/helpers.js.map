{"version":3,"sources":["helpers.mjs"],"names":["objectMakerReduceHelper","accum","key","val","getPropertyByPath","value","path","length","slice","undefined","peek","array","Array","isArray","getAllRolls","rolls","Object","values","reduce","newRolls"],"mappings":";;;;;;;AAAA;;;;;;;;;AASO,MAAMA,uBAAuB,GAAG,CAACC,KAAD,EAAQ,CAACC,GAAD,EAAMC,GAAN,CAAR,MAAwB,EAAE,GAAGF,KAAL;AAAY,GAACC,GAAD,GAAOC;AAAnB,CAAxB,CAAhC;AAEP;;;;;;;;;;;;;AASO,MAAMC,iBAAiB,GAAG,CAACC,KAAD,EAAQC,IAAR,KAC9BA,IAAI,CAACC,MAAL,KAAgB,CAAhB,GACGF,KADH,GAEGA,KAAK,IAAI,OAAOA,KAAP,KAAiB,QAA1B,GACED,iBAAiB,CAACC,KAAK,CAACC,IAAI,CAAC,CAAD,CAAL,CAAN,EAAiBA,IAAI,CAACE,KAAL,CAAW,CAAX,CAAjB,CADnB,GAEEC,SALD;AAOP;;;;;;;;;;AAMO,MAAMC,IAAI,GAAGC,KAAK,IAAIC,KAAK,CAACC,OAAN,CAAcF,KAAd,KAAwBA,KAAK,CAACJ,MAAN,GAAe,CAAvC,GAA2CI,KAAK,CAACA,KAAK,CAACJ,MAAN,GAAe,CAAhB,CAAhD,GAAqEE,SAA3F;AAEP;;;;;;;;;;;;;AASO,MAAMK,WAAW,GAAGC,KAAK,IAAIC,MAAM,CAACC,MAAP,CAAcF,KAAd,EAAqBG,MAArB,CAA4B,CAACjB,KAAD,EAAQkB,QAAR,KAAqB,CAAC,GAAGlB,KAAJ,EAAW,GAAGkB,QAAd,CAAjD,EAA0E,EAA1E,CAA7B","sourcesContent":["/**\n * This helper enables mapping over the entries in an object that is being used like a Map.\n * @function objectMakerReduceHelper\n * @example // returns { a: 2, b: 4 }\n * Object.entries({ a: 1, b: 2 }).map(([k,v]) => [k, v*2]).reduce(objectMakerReducerHelper, {})\n * @param {object} accum (Accumulator) This accumulates the return values of this function\n * @param {Array} currentValue The next key-value pair to be added to the accumulator\n * @returns {object}\n */\nexport const objectMakerReduceHelper = (accum, [key, val]) => ({ ...accum, [key]: val });\n\n/**\n * Safely descend into the object and retrieve the value at the described path\n * @function getPropertyByPath\n * @example // returns 5\n * getPropertyByPath({a: {b: [[],[5]]}}, ['a',b',1,0])\n * @param {any} value\n * @param {Array<string>} path\n * @return {any}\n */\nexport const getPropertyByPath = (value, path) =>\n  (path.length === 0\n    ? value\n    : value && typeof value === 'object'\n      ? getPropertyByPath(value[path[0]], path.slice(1))\n      : undefined);\n\n/**\n * Return the last entry in the array, like Array.pop(), but without changing the array\n * @function peek\n * @param {any[]} array\n * @returns {any} The last entry in the array, or undefined if the array is empty.\n */\nexport const peek = array => Array.isArray(array) && array.length > 0 ? array[array.length - 1] : undefined;\n\n/**\n * Converts the Rolls object into a flat array\n * @function getAllRolls\n * @example // returns ['1d6', '3d6', '15d20', '4d20']\n * getAllRolls({ 6: ['1d6', '3d6'], 20: ['15d20', '4d20'] })\n *\n * @param {object.<number, string[]>} rolls\n * @returns {string[]}\n */\nexport const getAllRolls = rolls => Object.values(rolls).reduce((accum, newRolls) => [...accum, ...newRolls], []);\n"],"file":"helpers.js"}